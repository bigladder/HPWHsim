#ifndef HPWHUTILS_hh
#define HPWHUTILS_hh

//-----------------------------------------------------------------------------
///	@brief	assign t_new to t if is_set, else assign t_default
//-----------------------------------------------------------------------------
template <typename T>
void checkFrom(T& t, const bool is_set, const T t_new, const T t_default)
{
    t = is_set ? t_new : t_default;
}

//-----------------------------------------------------------------------------
///	@brief	assign t_new to t if j contains key, else assign t_default
//-----------------------------------------------------------------------------
template <typename T>
bool checkFrom(T& t, nlohmann::json& j, std::string_view key, const T t_default)
{
    bool has_key = false;
    if (j.contains(key))
    {
        has_key = true;
        t = j[key];
    }
    else
        t = t_default;
    return has_key;
}

//-----------------------------------------------------------------------------
///	@brief	set t to t_new if has_value
//-----------------------------------------------------------------------------
template <typename T>
void checkTo(const T t, bool& is_set, T& t_new, const bool has_value = true)
{
    is_set = has_value;
    if (has_value)
    {
        t_new = t;
    }
}

//-----------------------------------------------------------------------------
///	@brief	Generate metadata and return as json
//-----------------------------------------------------------------------------
template <typename RSSCHEMA, typename RSTYPE>
void generate_metadata(RSTYPE& rs, std::string_view schema_url)
{
    checkTo({"Big Ladder Software, LLC"}, rs.metadata.schema_author_is_set, rs.metadata.schema_author);
    checkTo({"California Energy Commission"}, rs.metadata.author_is_set, rs.metadata.author);
    checkTo({"Representation of embedded HPWHsim element"}, rs.metadata.description_is_set, rs.metadata.description);
    checkTo({"Generated by HPWHsim"}, rs.metadata.source_is_set, rs.metadata.source);
    rs.metadata.schema_url = schema_url; rs.metadata.schema_url_is_set = true;
    rs.metadata.schema_version = RSSCHEMA::schema_version;rs.metadata.schema_version_is_set = true;
    rs.metadata.schema_name = RSSCHEMA::schema_title; rs.metadata.schema_name_is_set = true;

    time_t t = time(NULL);
    char time_of_creation[sizeof "2011-10-08T07:07:09Z"];
#if defined(WIN32)
    struct tm gmt;
    gmtime_s(&gmt, &t);
    strftime(time_of_creation, sizeof(time_of_creation), "%FT%TZ", &gmt);
#else
    auto ts = gmtime(&t);
    std::strftime(time_of_creation, sizeof(time_of_creation), "%FT%RZ", ts);
#endif
    //checkTo(time_of_creation, rs.metadata.time_of_creation_is_set, rs.metadata.time_of_creation);

    rs.metadata_is_set = true;
}

//-----------------------------------------------------------------------------
///	@brief	Transfer ProductInformation from schema to json repr
//-----------------------------------------------------------------------------
template <typename RSTYPE>
nlohmann::json get_productInformation_as_json(const RSTYPE& rs)
{
    nlohmann::json j_productInformation = {};
    if (rs.description_is_set)
    {
        auto& desc = rs.description;
        if (desc.product_information_is_set)
        {
            auto& info = desc.product_information;
            if (info.manufacturer_is_set)
                j_productInformation["manufacturer"] = info.manufacturer;
            if (info.model_number_is_set)
                j_productInformation["model_number"] = info.model_number;
        }
    }
    return j_productInformation;
}

//-----------------------------------------------------------------------------
///	@brief	Transfer Rating10CFR430 from schema
//-----------------------------------------------------------------------------
template <typename RSTYPE>
nlohmann::json get_rating10CFR430_as_json(const RSTYPE& rs)
{
    nlohmann::json j_rating10CFR430 = {};
    if (rs.description_is_set)
    {
        auto& desc = rs.description;
        if (desc.rating_10_cfr_430_is_set)
        {
            auto& data = desc.rating_10_cfr_430;
            if (data.certified_reference_number_is_set)
                j_rating10CFR430["certified_reference_number"] = data.certified_reference_number;
            if (data.nominal_tank_volume_is_set)
                j_rating10CFR430["nominal_tank_volume"] = data.nominal_tank_volume;
            if (data.first_hour_rating_is_set)
                j_rating10CFR430["first_hour_rating"] = data.first_hour_rating;
            if (data.recovery_efficiency_is_set)
                j_rating10CFR430["recovery_efficiency"] = data.recovery_efficiency;
            if (data.uniform_energy_factor_is_set)
                j_rating10CFR430["uniform_energy_factor"] = data.uniform_energy_factor;
        }
    }
    return j_rating10CFR430;
}

//-----------------------------------------------------------------------------
///	@brief	Transfer ProductInformation to schema
//-----------------------------------------------------------------------------
template <typename RSTYPE>
void set_productInformation_from_json(const nlohmann::json& j_productInformation, RSTYPE& rs)
{
   auto& desc = rs.description;
   auto& prod_info = desc.product_information;

   if (j_productInformation.contains("manufacturer"))
   {
        prod_info.manufacturer_is_set = true;
        prod_info.manufacturer = j_productInformation["manufacturer"];
   }

   if (j_productInformation.contains("model_number"))
   {
        prod_info.model_number_is_set = true;
        prod_info.model_number = j_productInformation["model_number"];
   }

   bool prod_info_set = prod_info.manufacturer_is_set || prod_info.model_number_is_set;
   checkTo(prod_info, desc.product_information_is_set, desc.product_information, prod_info_set);

   bool desc_set = prod_info_set;
   checkTo(desc, rs.description_is_set, rs.description, desc_set);
}

//-----------------------------------------------------------------------------
///	@brief	Transfer Rating10CFR430 to schema
//-----------------------------------------------------------------------------
template <typename RSTYPE>
void set_rating10CFR430_from_json(const nlohmann::json& j_rating10CFR430, RSTYPE& rs)
{
   auto& desc = rs.description;
   auto& data = desc.rating_10_cfr_430;

   if ((data.certified_reference_number_is_set =
            j_rating10CFR430.contains("certified_reference_number")))
        data.certified_reference_number = j_rating10CFR430["certified_reference_number"];

   if ((data.nominal_tank_volume_is_set = j_rating10CFR430.contains("nominal_tank_volume")))
        data.nominal_tank_volume = j_rating10CFR430["nominal_tank_volume"];

   if ((data.first_hour_rating_is_set = j_rating10CFR430.contains("first_hour_rating")))
        data.first_hour_rating = j_rating10CFR430["first_hour_rating"];

   if ((data.recovery_efficiency_is_set = j_rating10CFR430.contains("recovery_efficiency")))
        data.recovery_efficiency = j_rating10CFR430["recovery_efficiency"];

   if ((data.uniform_energy_factor_is_set = j_rating10CFR430.contains("uniform_energy_factor")))
        data.uniform_energy_factor = j_rating10CFR430["uniform_energy_factor"];

   desc.rating_10_cfr_430_is_set |= !j_rating10CFR430.empty();
   rs.description_is_set |= desc.rating_10_cfr_430_is_set;
}

nlohmann::json& findMetadata(nlohmann::json& j)
{
   if (j.empty())
        j["metadata"] = {};
   return j["metadata"];
}

void placeMetadata(const nlohmann::json& j_metadata, nlohmann::json& j)
{
    if (!j_metadata.empty())
       j["metadata"] = j_metadata;
}


void getProductInformation(nlohmann::json& j_productInformation, const nlohmann::json& j)
{
    if (!j.empty())
        if (j.contains("description"))
            if (j["description"].contains("product_information"))
                j_productInformation = j["description"]["product_information"];
}

void setProductInformation(const nlohmann::json& j_productInformation, nlohmann::json& j)
{
    if (!j_productInformation.empty())
    {
        if (!j.contains("description"))
            j["description"] = {};
        j["description"]["product_information"] = j_productInformation;
    }
}

void findRating10CFR430(nlohmann::json& j_rating10CFR430, const nlohmann::json& j)
{
    if (!j.empty())
        if (j.contains("description"))
            if (j["description"].contains("rating_10_cfr_430"))
                j_rating10CFR430 = j["description"]["rating_10_cfr_430"];
}

void placeRating10CFR430(const nlohmann::json& j_rating10CFR430, nlohmann::json& j)
{
    if (!j_rating10CFR430.empty())
    {
        if (!j.contains("description"))
            j["description"] = {};
        j["description"]["rating_10_cfr_430"] = j_rating10CFR430;
    }
}
#endif
