#ifndef HPWHUTILS_hh
#define HPWHUTILS_hh

#include <string>

#include <cstdio>
#include <cstdlib>
#include <vector>
#include <unordered_map>

#include <courier/courier.h>

#include <nlohmann/json.hpp>

#include "hpwh-data-model.hh"

//-----------------------------------------------------------------------------
///	@brief	assign t_new to t if is_set, else assign t_default
//-----------------------------------------------------------------------------
template <typename T>
void checkFrom(T& t, const bool is_set, const T t_new, const T t_default)
{
    t = is_set ? t_new : t_default;
}

//-----------------------------------------------------------------------------
///	@brief	assign t_new to t if j contains key, else assign t_default
//-----------------------------------------------------------------------------
template <typename T>
bool checkFrom(T& t, nlohmann::json& j, std::string_view key, const T t_default)
{
    bool has_key = false;
    if (j.contains(key))
    {
        has_key = true;
        t = j[key];
    }
    else
        t = t_default;
    return has_key;
}

//-----------------------------------------------------------------------------
///	@brief	set t to t_new if has_value
//-----------------------------------------------------------------------------
template <typename T>
void checkTo(const T t, bool& is_set, T& t_new, const bool has_value = true)
{
    is_set = has_value;
    if (has_value)
    {
        t_new = t;
    }
}

//-----------------------------------------------------------------------------
///	@brief	fill metadata fields of a schema object
//-----------------------------------------------------------------------------
template <typename RSSCHEMA, typename RSTYPE>
static void generate_metadata(RSTYPE& rs, std::string_view schema_name, std::string_view schema_url)
{
    auto& metadata = rs.metadata;
    checkTo({"Big Ladder Software, LLC"}, metadata.schema_author_is_set, metadata.schema_author);
    checkTo({"California Energy Commission"}, metadata.author_is_set, metadata.author);
    checkTo({"Representation of embedded HPWH element"},
            metadata.description_is_set,
            metadata.description);
    checkTo({"Generated by HPWHsim"}, metadata.source_is_set, metadata.source);
    checkTo(std::string(RSSCHEMA::schema_version),
            metadata.schema_version_is_set,
            metadata.schema_version);
    checkTo(std::string(schema_name), metadata.schema_name_is_set, metadata.schema_name);
    checkTo(std::string(schema_url), metadata.schema_url_is_set, metadata.schema_url);

    time_t t = time(NULL);
    char time_of_creation[sizeof "2011-10-08T07:07:09Z"];

#if defined(WIN32)
    struct tm gmt;
    gmtime_s(&gmt, &t);
    strftime(time_of_creation, sizeof(time_of_creation), "%FT%TZ", &gmt);
#else
    auto ts = gmtime(&t);
    std::strftime(time_of_creation, sizeof(time_of_creation), "%FT%RZ", ts);
#endif
    checkTo(
        std::string(time_of_creation), metadata.time_of_creation_is_set, metadata.time_of_creation);

    rs.metadata_is_set = true;
}

#endif
